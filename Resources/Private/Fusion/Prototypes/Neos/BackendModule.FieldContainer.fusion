prototype(Neos.Fusion.Form:Neos.BackendModule.FieldContainer) < prototype(Neos.Fusion.Form:Component.Field) {

    @propTypes {
        label = ${PropTypes.string}
        content = ${PropTypes.string}
    }

    #
    # label and afx content
    #
    label = null

    #
    # attributes for the container
    #
    attributes = Neos.Fusion:DataStructure

    #
    # container content
    #
    content = null

    #
    # translations source and package for labels and errors
    #
    translation =  Neos.Fusion:DataStructure {
        label = Neos.Fusion:DataStructure {
            package = 'Neos.Neos'
            source = 'Modules'
        }
        error = Neos.Fusion:DataStructure {
            package = 'Neos.Flow'
            source = 'ValidationErrors'
        }
    }

    renderer = afx`
        <div class={field.hasErrors() ? "neos-control-group neos-error" : "neos-control-group"} {...props.attributes} >
            <label class="neos-control-label" for={field.getName()} @if.has={props.label}>
                {I18n.translate(props.label, props.label, [], props.translation.label.source, props.translation.label.package)}
            </label>
            <div class="neos-controls">
                {props.content}
            </div>
            <ul @if.hasErrors={field.hasErrors()} class="errors">
                <Neos.Fusion:Loop items={field.getResult().flattenedErrors} itemName="errors" >
                    <Neos.Fusion:Loop items={errors} itemName="error" >
                        <li>
                            <span class="neos-help-block">
                                {I18n.translate(error.code, error, [field.value], props.translation.error.source, props.translation.error.package)}
                            </span>
                        </li>
                    </Neos.Fusion:Loop>
                </Neos.Fusion:Loop>
            </ul>
        </div>
    `

    #
    # all FieldComponents will render the field.name as id so
    # the label for from the FieldContainer references them correctly
    #
    prototype(Neos.Fusion.Form:Component.Field) {
        attributes.id = ${field.getName()}
    }

    #
    # use default bootstrap markup for checkboxes
    #
    prototype(Neos.Fusion.Form:Checkbox) {
        attributes.id = ${field.getName() + '-' + field.getTargetValueStringified()}
        renderer.@process.wrapInLabel {
            expression = afx`
                <label
                    class="neos-checkbox"
                    for={field.getName() + '-' + field.getTargetValueStringified()}
                >
                    {value}<span></span>
                    {props.content || field.getTargetValueStringified()}
                </label>
            `
        }
    }

    #
    # use default bootstrap markup for radio buttons
    #
    prototype(Neos.Fusion.Form:Radio) {
        attributes.id = ${field.getName() + '-' + field.getTargetValueStringified()}
        renderer.@process.wrapInLabel {
            expression = afx`
                <label
                    class="neos-radio"
                    for={field.getName() + '-' + field.getTargetValueStringified()}
                >
                    {value}<span></span>
                    {props.content || field.getTargetValueStringified()}
                </label>
            `
        }
    }
}

