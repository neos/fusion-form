prototype(Neos.Fusion.Form:Checkbox)  < prototype(Neos.Fusion.Form:Component.Field) {

    renderer = Neos.Fusion:Component {

        #
        # pass down props
        #
        attributes = ${props.attributes}

        #
        # the `checked` state is calculated outside the renderer to allow` overriding via `attributes`
        #
        checked = false
        checked.@process.checkMultiValue = ${Array.indexOf(field.getCurrentMultivalueStringified(), field.getTargetValueStringified()) > -1}
        checked.@process.checkMultiValue.@if.hasValue = ${field.hasCurrentValue()}
        checked.@process.checkMultiValue.@if.isMultiple = ${field.isMultiple()}
        checked.@process.checkSingleValue = ${field.getCurrentValueStringified() == field.getTargetValueStringified()}
        checked.@process.checkSingleValue.@if.hasValue = ${field.hasCurrentValue()}
        checked.@process.checkSingleValue.@if.isSingle = ${!field.isMultiple()}

        renderer = afx`
            <input
                id={field.getName()}
                type="checkbox"
                name={field.getName()}
                value={field.getTargetValueStringified()}
                checked={props.checked}
                {...props.attributes}
            />
        `
    }

}
